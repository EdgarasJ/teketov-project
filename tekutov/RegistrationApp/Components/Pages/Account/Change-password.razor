@page "/change-pass"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Internal
@using RegistrationApp.Data
@using RegistrationApp.Data.ViewModels
@using System.Security.Claims

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin, Patient, Doctor")]

@inject IDbContextFactory<ApplicationDbContext> AppDbContextFactory
@inject NavigationManager navigationManager

<h3>Change password</h3>

<EditForm Model="@Model" FormName="ChangePasswordForm">
    <DataAnnotationsValidator />
    <div class="form-group m-3">
        <label for="old-pass">Old Password: </label>
        <InputText type="password" id="old-pass" @bind-Value="@Model.old_password"></InputText>
        <ValidationMessage For="() => Model.old_password" />
    </div>
    <div class="form-group m-3">
        <label for="new-pass">New Password:</label>
        <InputText type="password" id="new-pass" @bind-Value="@Model.new_password"></InputText>
        <ValidationMessage For="() => Model.new_password" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" @onclick="(() => ChangePass())">Change</button>
    </div>
</EditForm>
<span class="mt-3">@msg</span>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [SupplyParameterFromForm]
    public PassViewModel Model { get; set; } = new PassViewModel();

    List<User> users;

    uint sid;
    dynamic querry;
    string msg;
    string u_pass;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var u_id = authenticationState.User;

        var psid = u_id.FindFirst(c => c.Type == ClaimTypes.PrimarySid)?.Value;

        sid = Convert.ToUInt32(psid, 10);

        using (var context = AppDbContextFactory.CreateDbContextAsync())
        {
            var u_passes = context.Result.Users.Where(user => user.id == sid).Select(user => user.password).ToList();
            u_pass = u_passes[0];
        }
    }

    private async Task ChangePass()
    {
        using (var context = AppDbContextFactory.CreateDbContextAsync())
        {

            try
            {
                if(Model.old_password == u_pass)
                {
                    
                    context.Result.Users
                    .Where(u => u.id == sid)
                    .ExecuteUpdate(setters => setters
                    .SetProperty(u => u.password, Model.new_password));
                
                    await context.Result.SaveChangesAsync();
                    msg = "Password Changed.";
                }
                else
                {
                    msg = "Error: Wrong old password.";
                }

            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}
