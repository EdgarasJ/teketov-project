@page "/enter-visit-findings/{appointmentId:int}"
@using RegistrationApp.Data
@using RegistrationApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AppointmentService AppointmentService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<h3>Enter Visit Findings</h3>

@if (appointment == null || visitFinding == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="visitFinding" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="appointmentId" class="form-label">Appointment ID</label>
            <input type="text" id="appointmentId" class="form-control" value="@appointment.id" disabled />
        </div>

        <div class="mb-3">
            <label for="findings" class="form-label">Findings</label>
            <InputTextArea id="findings" class="form-control" @bind-Value="visitFinding.findings" />
        </div>

        <div class="mb-3">
            <label for="prescription" class="form-label">Prescription</label>
            <InputTextArea id="prescription" class="form-control" @bind-Value="visitFinding.prescription" />
        </div>

        <div class="mb-3">
            <label for="followup" class="form-label">Follow-Up</label>
            <InputTextArea id="followup" class="form-control" @bind-Value="visitFinding.fallowup" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    [Parameter]
    public int AppointmentId { get; set; }

    private Appointment appointment;
    private Visitfinding visitFinding;

    protected override async Task OnInitializedAsync()
    {
        uint uintAppointmentId = (uint)AppointmentId;  
        appointment = await AppointmentService.GetAppointmentByIdAsync(uintAppointmentId);
        visitFinding = await AppointmentService.GetVisitFindingByAppointmentIdAsync(uintAppointmentId) ?? new Visitfinding { appointment_id = uintAppointmentId };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await AppointmentService.AddOrUpdateVisitFindingAsync(visitFinding);
            Navigation.NavigateTo("/visit-findings-list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding visit findings: {ex.Message}");
        }
    }
}